# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, lib, pkgs, modulesPath, ... }:

{
  imports =
    [ (modulesPath + "/installer/scan/not-detected.nix")
      ./disk-config.nix
    ];

  boot.initrd.availableKernelModules = [ "ehci_pci" "ahci" "usbhid" "usb_storage" "sd_mod" ];
  boot.initrd.kernelModules = [ ];
  boot.kernelModules = [ "kvm-intel" ];
  boot.extraModulePackages = [ ];

  fileSystems."/" =
    { device = "/dev/disk/by-uuid/1aff6f7d-15d5-4d01-afd7-cd7ac1e2f091";
      fsType = "ext4";
    };

  fileSystems."/boot" =
    { device = "/dev/disk/by-uuid/8B93-3039";
      fsType = "vfat";
      options = [ "fmask=0077" "dmask=0077" ];
    };

  swapDevices =
    [ { device = "/dev/disk/by-uuid/285ffa67-845a-4fa4-859f-1be7615d3954"; }
    ];


  #snapraid later ;)
#   snapraid = {
#     enable = true;
#     parityFiles = [
#       "/mnt/parity/snapraid.parity"
#     ];
#     dataDisks = {
#       d1 = "/mnt/data1/";
#       d2 = "/mnt/data2/";
#     };
#     # the content files can be placed wherever. There just needs
#     # to be <# of parity drives> + 1 content files.
#     contentFiles = [
#       "/mnt/data1/snapraid.content"
#       "/mnt/data2/snapraid.content"
#     ];
#     exclude = [
#       "*.unrecoverable"
#       "/lost+found/"
#       "/media/"
#     ];
# 
#   };
#     

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.eno1.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.intel.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
}
